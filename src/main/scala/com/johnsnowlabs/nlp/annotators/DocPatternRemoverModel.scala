package com.johnsnowlabs.nlp.annotators

import com.johnsnowlabs.nlp.AnnotatorType.DOCUMENT
import com.johnsnowlabs.nlp.{Annotation, AnnotatorModel, ParamsAndFeaturesReadable, ParamsAndFeaturesWritable}
import org.apache.spark.ml.param.Param
import org.apache.spark.ml.util.Identifiable


class DocPatternRemoverModel(override val uid: String) extends AnnotatorModel[DocPatternRemoverModel] {

  val EmptyStr = ""

  /** pattern to grab from text as token candidates. Defaults \\S+
    *
    * @group param
    **/
  val targetPattern: Param[String] = new Param(this, "targetPattern", "pattern to grab from text as token candidates. Defaults \\S+")

  /** removalPolicy to removal pattern from text
    *
    * @group param
    **/
  val removalPolicy: Param[String] = new Param(this, "removalPolicy", "removalPolicy to removal pattern from text")

  /** Annotator reference id. Used to identify elements in metadata or to refer to this annotator type */
  /** Input annotator type : DOCUMENT
    *
    * @group anno
    **/
  override val inputAnnotatorTypes: Array[AnnotatorType] = Array[AnnotatorType](DOCUMENT)

  /** Input annotator type : DOCUMENT
    *
    * @group anno
    **/
  override val outputAnnotatorType: AnnotatorType = DOCUMENT

  def this() = this(Identifiable.randomUID("DOC_PATTERN_REPLACER"))

  /** pattern to grab from text as token candidates. Defaults \\S+
    *
    * @group setParam
    **/
  def setTargetPattern(value: String): this.type = set(targetPattern, value)

  /** pattern to grab from text as token candidates. Defaults \\S+
    *
    * @group getParam
    **/
  def getTargetPattern: String = $(targetPattern)

  /** pattern to grab from text as token candidates. Defaults \\S+
    *
    * @group setParam
    **/
  def setRemovalPolicy(value: String): this.type = set(removalPolicy, value)

  /** pattern to grab from text as token candidates. Defaults \\S+
    *
    * @group getParam
    **/
  def getRemovalPolicy: String = $(removalPolicy)

  private def searchAndRemove(s: String, pattern: String)(policy: String) = policy match {
    case "all" => s.replaceAll(pattern, EmptyStr)
    case "first" => s.replaceFirst(pattern, EmptyStr)
  }

  /**
    * takes a document and annotations and produces new annotations of this annotator's annotation type
    *
    * @param annotations Annotations that correspond to inputAnnotationCols generated by previous annotators if any
    * @return any number of annotations processed for every input annotation. Not necessary one to one relationship
    */
  override def annotate(annotations: Seq[Annotation]): Seq[Annotation] = {
    annotations.map(annotation => {
      Annotation(
        outputAnnotatorType,
        annotation.begin,
        annotation.end,
        searchAndRemove(annotation.result, getTargetPattern)(getRemovalPolicy),
        annotation.metadata
      )
    })
  }
}


object DocPatternRemoverModel extends ParamsAndFeaturesReadable[NormalizerModel]